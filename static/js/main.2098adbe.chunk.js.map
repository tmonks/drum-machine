{"version":3,"sources":["Display.js","DrumPad.js","drumPadConfig.js","serviceWorker.js","index.js","DrumMachine.js"],"names":["DrumPad","props","id","clipName","audioRef","useState","animated","setLit","useEffect","hit","currentTime","play","className","onMouseDown","mouseDownHandler","drumPadID","onMouseUp","mouseUpHandler","onAnimationEnd","letter","ref","audio","src","process","clip","drumPadConfig","samples","name","file","Boolean","window","location","hostname","match","ReactDOM","render","display","setDisplay","drumHits","setDrumHits","currentBank","letterToDrumPad","findIndex","x","hitDrumPad","length","updatedDrumHits","handleMouseDown","handleMouseUp","handleKeyDown","e","String","fromCharCode","keyCode","handleKeyUp","console","log","document","addEventListener","removeEventListener","map","drumPad","index","key","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2098adbe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Display.scss\";\r\n\r\nexport default function DrumPad(props) {\r\n  return (\r\n    <div id=\"display-container\">\r\n      <div id=\"triangle-left\"></div>\r\n      <div id=\"display\">{props.clipName}</div>\r\n      <div id=\"triangle-right\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\n// import sound from \"./assets/test.wav\";\nimport \"./DrumPad.scss\";\n\nexport default function DrumPad(props) {\n  let audioRef = null;\n\n  const [animated, setLit] = useState(false);\n\n  useEffect(() => {\n    if (props.hit) {\n      audioRef.currentTime = 0;\n      audioRef.play();\n    }\n  }, [props.hit, audioRef]);\n\n  const handleMouseDown = () => {\n    setLit(false);\n    props.mouseDownHandler(props.drumPadID);\n  };\n\n  const handleMouseUp = () => {\n    setLit(true);\n    props.mouseUpHandler(props.drumPadID);\n  };\n\n  return (\n    <div\n      className={`drum-pad ${props.hit ? \"hit\" : \"\"} ${\n        animated ? \"animated\" : \"\"\n      }`}\n      onMouseDown={() => handleMouseDown()}\n      onMouseUp={() => handleMouseUp()}\n      onAnimationEnd={() => setLit(false)}\n      id={\"drumPad\" + props.drumPadID}\n    >\n      {props.letter}\n      <audio\n        ref={audio => {\n          audioRef = audio;\n        }}\n        src={process.env.PUBLIC_URL + \"/sounds/\" + props.clip}\n        id={props.letter}\n        className=\"clip\"\n      />\n    </div>\n  );\n}\n","const drumPadConfig = [\r\n  {\r\n    id: \"Q\",\r\n    samples: [\r\n      {\r\n        name: \"tom tom\",\r\n        file: \"power-drum-kit/TOMLOW2.mp3\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: \"W\",\r\n    samples: [\r\n      {\r\n        name: \"rim shot\",\r\n        file: \"power-drum-kit/RIMSHOT1.mp3\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: \"E\",\r\n    samples: [\r\n      {\r\n        name: \"clap\",\r\n        file: \"power-drum-kit/CLAP.mp3\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: \"A\",\r\n    samples: [\r\n      {\r\n        name: \"crash cymbal\",\r\n        file: \"power-drum-kit/CRASH1.mp3\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: \"S\",\r\n    samples: [\r\n      {\r\n        name: \"ride cymbal\",\r\n        file: \"power-drum-kit/RIDEMID.mp3\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: \"D\",\r\n    samples: [\r\n      {\r\n        name: \"hi-hat open\",\r\n        file: \"power-drum-kit/HHOPEN2.mp3\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: \"Z\",\r\n    samples: [\r\n      {\r\n        name: \"snare\",\r\n        file: \"power-drum-kit/SNARE12.mp3\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: \"X\",\r\n    samples: [\r\n      {\r\n        name: \"bass drum\",\r\n        file: \"power-drum-kit/BDRUM13.mp3\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    id: \"C\",\r\n    samples: [\r\n      {\r\n        name: \"hi-hat closed\",\r\n        file: \"power-drum-kit/HHCLOSE1.mp3\"\r\n      }\r\n    ]\r\n  }\r\n];\r\n\r\nexport default drumPadConfig;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport DrumMachine from \"./DrumMachine\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<DrumMachine />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\nimport \"./DrumMachine.scss\";\nimport ReactFCCTest from \"react-fcctest\";\nimport Display from \"./Display\";\nimport DrumPad from \"./DrumPad\";\nimport drumPadConfig from \"./drumPadConfig\";\n\nexport default function DrumMachine() {\n  const [display, setDisplay] = useState(\"\");\n  const [drumHits, setDrumHits] = useState([\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false,\n    false\n  ]);\n  const [currentBank, setCurrentBank] = useState(0);\n\n  // given a letter, find the drumPadID (index) of the drumPad\n  const letterToDrumPad = letter => {\n    return drumPadConfig.findIndex(x => {\n      return x.id === letter;\n    });\n  };\n\n  const hitDrumPad = (drumPadID, hit) => {\n    // confirm the drumPadID is valid for updating state\n    if (drumPadID >= 0 && drumPadID < drumHits.length) {\n      const updatedDrumHits = [...drumHits];\n      updatedDrumHits[drumPadID] = hit;\n      setDrumHits(updatedDrumHits);\n      setDisplay(drumPadConfig[drumPadID].samples[currentBank].name);\n    }\n  };\n\n  // if a drumPad is clicked, mark it as hit\n  const handleMouseDown = drumPadID => {\n    hitDrumPad(drumPadID, true);\n  };\n\n  // if a drumPad is clicked, mark it as not hit\n  const handleMouseUp = drumPadID => {\n    hitDrumPad(drumPadID, false);\n  };\n\n  useEffect(() => {\n    // if one of keys for a drumPad is pressed, hit the drum pad\n    const handleKeyDown = e => {\n      const drumPadID = letterToDrumPad(String.fromCharCode(e.keyCode));\n      // confirm the drumPad was found\n      if (drumPadID >= 0) {\n        hitDrumPad(drumPadID, true);\n      }\n    };\n\n    // if one of the keys for a drumPad is released, release the drum pad\n    const handleKeyUp = e => {\n      const drumPadID = letterToDrumPad(String.fromCharCode(e.keyCode));\n      // confirm the drumPad was found\n      if (drumPadID >= 0) {\n        hitDrumPad(drumPadID, false);\n      }\n    };\n\n    console.log(\"Adding event listeners...\");\n    document.addEventListener(\"keydown\", handleKeyDown, false);\n    document.addEventListener(\"keyup\", handleKeyUp, false);\n\n    return () => {\n      console.log(\"Cleaning up...\");\n      document.removeEventListener(\"keydown\", handleKeyDown, false);\n      document.removeEventListener(\"keyup\", handleKeyUp, false);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      <ReactFCCTest />\n      <div id=\"drum-machine\">\n        <div className=\"title\">DRUM MACHINE</div>\n        <Display clipName={display} />\n        {drumPadConfig.map((drumPad, index) => {\n          return (\n            <DrumPad\n              hit={drumHits[index]}\n              mouseDownHandler={handleMouseDown}\n              mouseUpHandler={handleMouseUp}\n              letter={drumPad.id}\n              drumPadID={index}\n              key={index}\n              clip={drumPad.samples[currentBank].file}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}